<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTML的布局学习记录</title>
    <link href="/2021/09/07/HTML%E7%9A%84%E5%B8%83%E5%B1%80%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/09/07/HTML%E7%9A%84%E5%B8%83%E5%B1%80%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="HTML布局的学习记录"><a href="#HTML布局的学习记录" class="headerlink" title="HTML布局的学习记录"></a>HTML布局的学习记录</h3><h4 id="一、盒子模型"><a href="#一、盒子模型" class="headerlink" title="一、盒子模型"></a>一、盒子模型</h4><p>  HTML中的每个元素都是盒子，每个盒子都有<code>margin</code>，<code>border</code>，<code>padding</code>，<code>content</code>构成。</p><h4 id="二、为什么要有盒子模型呢？"><a href="#二、为什么要有盒子模型呢？" class="headerlink" title="二、为什么要有盒子模型呢？"></a>二、为什么要有盒子模型呢？</h4><p>答：举个例子快递小哥在送货前，首先得把商品装车吧， 如果有西瓜、显示屏、瓜子、化妆品等形状各异，直接装的话那画面太难了！但实际中每个商品外面会包装个纸箱或者套个袋子，只需把箱子码好就可以送货了，是不是省事多了。  浏览器在布局的时候也是如此，每个元素的特性都不一样，外面套个盒子，那布局的时候就是摆盒子了，容易多了。</p><p><strong>本质：盒子模型隔绝了元素内容的多样性，提高了布局效率和开发效率。</strong></p><h4 id="三、标准盒子和怪异盒子"><a href="#三、标准盒子和怪异盒子" class="headerlink" title="三、标准盒子和怪异盒子"></a>三、标准盒子和怪异盒子</h4><h5 id="为什么有时候调整盒子的padding和border会导致盒子的可视区域变化呢？"><a href="#为什么有时候调整盒子的padding和border会导致盒子的可视区域变化呢？" class="headerlink" title="为什么有时候调整盒子的padding和border会导致盒子的可视区域变化呢？"></a>为什么有时候调整盒子的<code>padding</code>和<code>border</code>会导致盒子的可视区域变化呢？</h5><p>答：盒子模型在面积计算方面有多种模式，常见的有<code>border-box</code>和<code>content-box</code>，通过<code>box-sizing</code>进行指定</p><blockquote><p>注意：width值得是css中设置的属性width，layout-width是实际在浏览器中的看到的宽度</p><p><code>border-box</code>：<code>width=border+padding+content</code>，<code>layout-width=width</code>，称为怪异盒子</p><p><code>conent-box</code>： <code>width=content</code>，`layout-width=border+padding+width，称为标准盒子</p></blockquote><p>总结：默认的为标准盒子模型<code>conent-box</code>,css属性中的<code>width和</code>height<code>仅指content的大小，调整</code>padding<code>和</code>border`</p><p>则盒子的可视区域会变化；而怪异盒子模型<code>border-box</code>，则<code>width</code>和<code>height</code>包括<code>border</code>、<code>padding</code>、<code>content</code>，调整其中任意属性，则可视区域不会变化，而<code>content</code>会增大或者减小。</p><h4 id="四、盒子的margin-left-、margin-right、margin-top、margin-bottom的生效策略"><a href="#四、盒子的margin-left-、margin-right、margin-top、margin-bottom的生效策略" class="headerlink" title="四、盒子的margin-left 、margin-right、margin-top、margin-bottom的生效策略"></a>四、盒子的<code>margin-left</code> 、<code>margin-right</code>、<code>margin-top</code>、<code>margin-bottom</code>的生效策略</h4><h5 id="4-1-为什么同时设置了盒子的margin-left-、margin-right，只有margin-left生效呢？"><a href="#4-1-为什么同时设置了盒子的margin-left-、margin-right，只有margin-left生效呢？" class="headerlink" title="4.1 为什么同时设置了盒子的margin-left 、margin-right，只有margin-left生效呢？"></a>4.1 为什么同时设置了盒子的<code>margin-left</code> 、<code>margin-right</code>，只有<code>margin-left</code>生效呢？</h5><p>答：布局的时候，浏览器是从左开始布局的，设置的间距其实是大于等于的判定。左间距为30px，右间距为50px，那么如果右边的实际空间剩余超过50px，则即可。</p><h5 id="4-2-为什么同时设置了盒子的margin-top-、margin-bottom，只有margin-top生效呢？"><a href="#4-2-为什么同时设置了盒子的margin-top-、margin-bottom，只有margin-top生效呢？" class="headerlink" title="4.2 为什么同时设置了盒子的margin-top 、margin-bottom，只有margin-top生效呢？"></a>4.2 为什么同时设置了盒子的<code>margin-top</code> 、<code>margin-bottom</code>，只有<code>margin-top</code>生效呢？</h5><p>答：布局的时候，浏览器是从上往下布局的，设置的间距其实是大于等于的判定。上间距为30px，下间距为50px，那么如果下边的实际空间剩余超过50px，则即可。</p><p><strong>综上所述：浏览器布局从左上到开始，生效的为<code>margin-right</code>和<code>margin-bottom</code>则在兄弟元素的时候会生效。</strong></p><h4 id="五、float布局相关"><a href="#五、float布局相关" class="headerlink" title="五、float布局相关"></a>五、float布局相关</h4><h5 id="5-1-为什么会出现高度塌陷？"><a href="#5-1-为什么会出现高度塌陷？" class="headerlink" title="5.1 为什么会出现高度塌陷？"></a>5.1 <span id="5.1-float">为什么会出现高度塌陷？</span></h5><ul><li><p>什么是高度塌陷？</p><p>答：高度塌陷是指父子元素关系，父元素未指定高度，依靠内部子元素来撑起来。子元素内部设置了float的属性，会导致父元素的高度为0（也就是塌陷）。原因是float脱离了正常的文档流，子元素不能再撑起来父元素。</p></li><li><p>如何解决高度塌陷或者称清除浮动？</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/*box为父级容器,利用overflow触发BFC*/</span><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-comment">/*利用clear清除*/</span><br><span class="hljs-selector-class">.clearfix</span>:after&#123;<br>  content: <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">visibility</span>: hidden;  <br>  <span class="hljs-attribute">clear</span>: both;<br>&#125;<br><span class="hljs-comment">/*兼容IE6*/</span><br><span class="hljs-selector-class">.clearfix</span> &#123;<br>  <span class="hljs-comment">/* 触发 hasLayout */</span> <br>  zoom: <span class="hljs-number">1</span>; <br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h5 id="5-2-float的元素如何上浮呢"><a href="#5-2-float的元素如何上浮呢" class="headerlink" title="5.2 float的元素如何上浮呢"></a>5.2 float的元素如何上浮呢</h5><p>设置为float的元素会向左上或者右上进行浮动，如果遇到最近的块元素（独占一行），浮动的元素就会停止，可以把块元素想象成一堵墙即可，最外层的块元素是<code>body</code>。如果多个元素浮动，则按照<code>HTML</code>的结构顺序依次进行浮动，后浮动的挨着前浮动的（同时<code>left</code>或者<code>right</code>）</p><h5 id="5-3-浮动元素会有哪些影响呢"><a href="#5-3-浮动元素会有哪些影响呢" class="headerlink" title="5.3 浮动元素会有哪些影响呢"></a>5.3 浮动元素会有哪些影响呢</h5><ul><li><p>高度塌陷，详见<a href="#5.1-float">5.1</a></p></li><li><p>浮动元素会脱离文档流：不在正常的文档流中，其它在正常文档流中的元素会认为它不存在。</p></li><li><p>提升视图层次，浮动的元素的<code>z-index</code>会自己提升</p></li><li><p>浮动元素会改变部分元素的特性：内联元素浮动后，<code>width</code>和<code>height</code>可以进行指定</p></li></ul><h4 id="六、BFC是什么，有什么用途"><a href="#六、BFC是什么，有什么用途" class="headerlink" title="六、BFC是什么，有什么用途"></a>六、BFC是什么，有什么用途</h4><h5 id="BFC是什么"><a href="#BFC是什么" class="headerlink" title="BFC是什么"></a>BFC是什么</h5><p>BFC是一个独立的布局环境，BFC内部的元素布局与外部互不影响</p><h6 id="BFC的用途（常用的）"><a href="#BFC的用途（常用的）" class="headerlink" title="BFC的用途（常用的）"></a>BFC的用途（常用的）</h6><ul><li><p>父子层级可以解决：外边距塌陷、高度塌陷</p></li><li><p>BFC和其它元素可以解决的问题：<code>float</code>的元素不会发生重叠，边距合并（套用一个<code>div</code>触发BFC，不推荐会改变HTML的结构）</p><h5 id="触发BFC的条件"><a href="#触发BFC的条件" class="headerlink" title="触发BFC的条件"></a>触发BFC的条件</h5></li></ul><table><thead><tr><th>元素或属性</th><th>属性值</th></tr></thead><tbody><tr><td><code>float</code></td><td><code>left</code>、<code>right</code></td></tr><tr><td><code>position</code></td><td><code>absolute</code>、<code>fixed</code></td></tr><tr><td><code>overflow</code></td><td><code>hidden</code>、<code>auto</code>、<code>scroll</code></td></tr><tr><td><code>display</code></td><td><code>inline-block</code>、<code>table-cell</code></td></tr></tbody></table><p>上述来源于<a href="https://zhuanlan.zhihu.com/p/127187654">参考链接</a>的汇总，感谢作者的分享</p><h4 id="六、定位相关"><a href="#六、定位相关" class="headerlink" title="六、定位相关"></a>六、定位相关</h4><p>CSS中的布局方式有<code>static</code>、<code>relative</code>、<code>absolute</code>、<code>fixed</code>，四种。默认的为<code>static</code>布局按照块级元素和内联元素的特性，正常布局，也就是说的文档流。</p><p><strong>个人当时理解不到的地方：块级元素独占一行，有时候看到的<code>div</code>可能宽度不到一屏，但实际在文档流中的影响的区域是一行的，布局的时候可以自己脑补满屏。</strong></p><p>因为正常的文档流方式，满足不了实际中的一些布局效果。例如多个块元素能在一行排列么？理解定位的关键是参考系的确定</p><table><thead><tr><th>布局方式</th><th>参考元素</th></tr></thead><tbody><tr><td><code>static</code></td><td>正常文档流方式</td></tr><tr><td><code>relative</code></td><td>相对于正常文档流方式中的位置，不脱离文档流</td></tr><tr><td><code>absolute</code></td><td>最近的非<code>static</code>的祖先元素，脱离文档流，<code>z-index</code>提升</td></tr><tr><td><code>fixed</code></td><td><code>absolute</code>的特殊情况，参靠的是浏览器窗口也就是body，脱离文档流，<code>z-index</code>提升</td></tr></tbody></table><p><strong>CSS要想熟练掌握，理论是基础，关键还是写页面，写页面！</strong></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序学习记录</title>
    <link href="/2021/09/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/09/07/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、小程序的学习路径"><a href="#一、小程序的学习路径" class="headerlink" title="一、小程序的学习路径"></a>一、小程序的学习路径</h3><ul><li>ES6语法</li><li>HTML和CSS的学习</li><li>微信组件和API的学习</li></ul><h3 id="二、小程序的加载流程"><a href="#二、小程序的加载流程" class="headerlink" title="二、小程序的加载流程"></a>二、小程序的加载流程</h3><ul><li>小程序的宿主是微信，打开小程序，首先会下载下程序的所有文件。小程序会读取app.json（应用配置文件）中的pages的第一个目录下的页面。</li><li>页面渲染的时候，先读取.json的配置文件，再读取wxml和wxss文件渲染，最后读取wxjs文件加载数据</li><li>渲染层和逻辑层是分别在不同的线程，渲染层可以有多个通过webview进行显示；逻辑层是在单独的jscore里面进行处理，不会阻塞渲染层的显示。</li></ul><h3 id="三、ES6语法的学习"><a href="#三、ES6语法的学习" class="headerlink" title="三、ES6语法的学习"></a>三、ES6语法的学习</h3><ol><li>作用域的概念</li></ol><ul><li>ES6有三种作用域：全局作用域、函数作用域、快级作用域。</li><li>var、let、const修饰变量的区别 <ul><li>var的变量有变量提升，可以先使用后定义（解释的时候会提升）；</li><li>let修饰的变量不能跨块操作；var修饰的变量不能跨函数操作；</li><li>const修饰的变量必须初始化而且不能改变 </li></ul></li></ul><ol start="2"><li>原型链的理解（[[prototype]]、<code>__proto__</code>、prototype）</li></ol><ul><li><p>原型链继承指得是<code>__proto__</code>的继承链，[[prototype]]是<code>__proto</code>的不同书写方式</p></li><li><p>JS中的对象实例化有new和字面量两种，每个对象的<code>__proto__</code>都指向构造函数的原型对象，构造函数的原型对象是在定义时候自动添加的，默认为{}；字面量对象的创建实质如下：</p><blockquote><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xiaowang = &#123;<br>  name: <span class="hljs-string">&quot;小王&quot;</span>,<br>  sayHello: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello, my name is&quot;</span> +<span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.name);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 相当于如下Object为其构造函数</span><br><span class="hljs-keyword">var</span> xiaowang = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>xiaowang.name = <span class="hljs-string">&quot;小王&quot;</span>;<br>xiaowang.sayHello = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;hello, my name is&quot;</span> +<span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.name);<br>&#125;;<br></code></pre></div></td></tr></table></figure></blockquote></li><li><p>任何函数有且只有函数都有一个prototype，在其定义（具体时机尚不清除）的时候产生，默认为{}，函数也是对象，它的<code>__proto__</code>均为Function.prototype， 因为任何函数本质都是由Function实例化的。特殊性Function[函数是自身构造的，构成了闭环；</p></li><li><p>Object.protype对象的<code>__proto__</code>比较特殊指向了null，表明原型继承链的顶点</p></li></ul><ol start="3"><li>js中new对象的过程（待补充）</li><li>js中继承的过程（待补充）</li><li>Object的常用属性和方法（待补充）</li></ol><h3 id="四、CSS布局的学习（定位-选择器-样式）"><a href="#四、CSS布局的学习（定位-选择器-样式）" class="headerlink" title="四、CSS布局的学习（定位+ 选择器 + 样式）"></a>四、CSS布局的学习（定位+ 选择器 + 样式）</h3><h4 id="4-1-相关的知识点"><a href="#4-1-相关的知识点" class="headerlink" title="4.1 相关的知识点"></a>4.1 相关的知识点</h4><ul><li><p>块级和行级元素</p><ul><li>块级元素的特定：独占一行，宽默认是父容器的宽度，宽和高可以设置，内容高度可以通过子视图撑起来</li><li>行级元素：从左到有排列，宽度和高度设置无效，padding和marging的水平方向有效</li></ul></li><li><p><code>static</code>、<code>relative</code>、<code>fixed</code>、<code>absolute</code>、<code>float</code>的深度使用</p><blockquote><ol><li><code>staic</code>是浏览器默认的布局行为，行内元素从左到右排列，块内元素从上到下独占一行排列。<code>staic</code>中设置<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>均无效</li><li><code>relatvie</code>是相对布局，元素不脱离文档流（元素实际占的位置还是原先的位置，典型的占着茅坑那不拉啥）。<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>是相对于自身原有的布局</li><li><code>absolute</code>绝对布局参考位置：最近的非static的元素，进行布局，脱离了文档流（文档流中的其它元素正常布局的时候，这个元素相当于不存在）</li><li><code>fixed</code>是固定布局，参考位置：浏览器窗口，进行布局，脱离了文档流文档流中的其它元素正常布局的时候，这个元素相当于不存在）</li><li>float主要是为了解决图文混排，影响（坑）比较多，单独拎出来说</li></ol></blockquote></li><li><p>flex布局的使用</p></li><li><p>rpx、px、rem的屏幕适配</p><ul><li>小程序中认为所有屏幕的宽度均为750rpx，在iphone6中1rpx=1物理像素=0.5px，不同屏幕下rpx会自动适配（等比放大和缩小）。本质是1rpx在不同分辨率的屏幕下，对应的rpx=屏幕的物理像素/750，和rem利用root的font异曲同工。</li></ul></li><li><p>常见选择器的使用</p></li></ul><h4 id="4-2-布局的原理"><a href="#4-2-布局的原理" class="headerlink" title="4.2 布局的原理"></a>4.2 布局的原理</h4><ul><li><p>css盒子模型和<a href="https://segmentfault.com/a/1190000009139500">布局原理的链接</a> </p></li><li><p>布局的本质是探究盒子在父容器（上一级盒子）里的放置位置：document-&gt;html-&gt;(head、body)</p></li><li><p>BFC的产生和作用</p><ul><li><p>BFC的产生</p><ol><li><code>overflow</code> 的值不为 <code>visible</code></li><li><code>float</code>不为<code>none</code></li><li><code>position</code> 的值不为 <code>static</code> 或者 <code>relative</code></li><li><code>display</code> 的值为 <code>table-cell</code> , <code>table-caption</code> , <code>inline-block</code> , <code>flex</code> , 或者 <code>inline-flex</code> 中的其中一个</li></ol></li><li><p>BFC的作用</p><ol><li><p>消除块级元素上下间距的合并</p></li><li><p>清除浮动导致塌陷高度</p></li><li><p>清除浮动元素和盒子边距的重合</p></li><li><p>边距侧漏的影响（父子div，子的第一个div设置margin-top会穿透子的div，变成父级的margin-top</p></li></ol></li></ul></li></ul><h4 id="4-3-css为什么需要加一些私有前缀"><a href="#4-3-css为什么需要加一些私有前缀" class="headerlink" title="4.3 css为什么需要加一些私有前缀"></a>4.3 css为什么需要加一些私有前缀</h4><blockquote><p>某个属性的增加，从提出到成为w3c的标准，要经过很长的时间。浏览器厂商觉得属性成熟的时候，可能就会提前使用，但是为了防止以后成为标准时候属性的变更，就会加一些前缀来兼容，以下是一些浏览器的一些前缀</p></blockquote><ul><li>-webkit- 谷歌浏览器</li><li>-ms- ie浏览器</li><li>-moz- 火狐浏览器</li><li>-o- opera浏览器<h4 id="4-4-css中的选择器"><a href="#4-4-css中的选择器" class="headerlink" title="4.4 css中的选择器"></a>4.4 css中的选择器</h4></li></ul><h5 id="4-4-1-选择器的分类"><a href="#4-4-1-选择器的分类" class="headerlink" title="4.4.1 选择器的分类"></a>4.4.1 选择器的分类</h5><p>​    选择器的作用是用于获取元素，在移动端开发中元素的获取比较简单变量和tag，在html中的元素是怎么获取呢？通过选择器。选择器的种类按照名称分为</p><ul><li><p>类选择器：<code>.class</code>，用于标识多个元素</p><ul><li><code>.class1.class2....n</code>, 交集关系，一个元素同时有class1到classn的时候，会被选中。<code>.class</code>属于多个类选择器中的n=1的情况</li></ul></li><li><p>id选择器: <code>#id</code>,用于标识唯一的元素，整个html文档里面不能重复</p></li><li><p>元素选择器：element，选中所有的元素（采用问答形式感觉更容易理解，内：父子孙关系，后：兄弟关系）</p><blockquote><p>1.如何选中所有的p元素</p><p>答：<code>p&#123;&#125;</code>。选中所有的某类元素<code>element &#123;&#125;</code></p><p>2.如何选则所有p元素和div元素</p><p>答：<code>p,div&#123;&#125;</code>。选中所有的element1和element2<code>element1,element2&#123;&#125;</code></p><p>2.如何选中div里面的所有p元素</p><p>答: <code>div p&#123;&#125;</code>。选中element1内的所有element2元素 <code>element1 element2&#123;&#125;</code></p><p>3.如何选中div里面的所有子的p元素，非孙元素</p><p>答: <code>div&gt;p&#123;&#125;</code>。选中element1内的所有子的element2元素 <code>element1&gt;element2&#123;&#125;</code></p><p>4.如何选中div后面的第一个p元素</p><p>答：<code>div+p&#123;&#125;</code>。选中element1后面的第一个element2元素 <code>element1+element2&#123;&#125;</code></p><p>5.如何选中div后面的所有p元素</p><p>答：<code>div~p&#123;&#125;</code>。选中element1后面的所有element2元素 <code>element1~element2&#123;&#125;</code></p></blockquote></li><li><p>属性选择器：<code>[attribute=value]</code>,利用元素的属性和值</p></li><li><p>伪类选择器: <code>:value</code>,一般是stated一般是某些状态类似<code>active</code></p><ul><li><p>兄弟关系中的选择器（兄弟关系可以类比为父元素下的数组，数组内部的索引就是添加元素的顺序）</p><ol><li>数量顺序上的维度：<code>:first-child</code>、<code>last-child</code>、<code>nth-child(n)</code>、<code>nth-last-child(n)</code>、<code>onlf-child</code></li></ol><blockquote><ol><li><code>p:first-child</code>，兄弟关系中的第一个p元素</li><li><code>p:last-child</code>，兄弟关系中的最后一个p元素</li><li><code>p:nth-child(n)</code>，兄弟关系中的第n个元素，顺序从前往后</li><li><code>p:nth-last-child(n)</code>，兄弟关系中元素中的的第n个元素，顺序从后往前</li><li><code>p:only-child</code>，父元素只有唯一的子元素，同时该元素为p类型</li></ol></blockquote><ol start="2"><li><p>类型顺序上的维度：<code>:first-of-type</code>、<code>:last-of-type</code>、<code>:nth-of-type(n)</code>、<code>:nth-last-of-type(n)</code>、<code>:only-of-type</code></p><blockquote><ol><li><code>p:first-of-type</code> ，兄弟关系中类型为p的第一个</li><li><code>p:last-of-type</code>，兄弟关系中类型为p的最后一个</li><li><code>p:nth-of-type(n)</code>，兄弟关系中类型为p的子元素中的第n个，顺序从前往后</li><li><code>p:nth-last-of-type(n)</code>，兄弟关系中类型为p的子元素数组中的的第n个，顺序从后往前</li><li><code>p:only-of-type</code>，任何父元素下的类型为p的子元素数组中的唯一一个</li></ol></blockquote></li></ol></li></ul></li></ul><p>​    选择器中的通用规则空格一般代表是父子关系，可以理解为某个盒子内的….。逗号在class中为同时的关系，在element中的时候为或者的关系，一般都是在内寻找具有某种属性的第几个的元素。</p><h5 id="4-4-2-选择器的权重"><a href="#4-4-2-选择器的权重" class="headerlink" title="4.4.2 选择器的权重"></a>4.4.2 选择器的权重</h5><p>  选择器的权重是分为4个等级，先祭出一张图片如下</p><div style="align: center">  <img src="https://images2018.cnblogs.com/blog/734402/201803/734402-20180315180252953-849133314.png"/></div><ul><li><p>权重的分类标准</p><blockquote><ol><li><p>style=内联的权重最高为 1000</p></li><li><p>id类型的选择器权重为 0100</p></li><li><p><code>class</code>、伪类、属性选择器的权重为 0010</p></li><li><p>元素、伪元素选择器的权重为 0001</p></li><li><p>*，&gt;（父子选择），+（同胞选择）权重为0</p></li></ol></blockquote></li><li><p>权重的计算公式<br>  权重 = 第1级选择器个数 * 1000， 第2级选择器个数 * 100 ， 第3级选择器个数 * 10 ，第4级选择器个数 * 1</p></li><li><p>权重的比对原则</p><ul><li>从高位到低位依次比对</li><li>条件相同的，后面的样式会覆盖前面的</li><li>css属性后面加!important的时候，优先级最高（比内联样式都高）</li></ul><p><img src="images/css-weight-result.png" alt="权重对比结果"></p></li></ul><h3 id="五、JS的事件"><a href="#五、JS的事件" class="headerlink" title="五、JS的事件"></a>五、JS的事件</h3><h4 id="5-1-事件传递机制"><a href="#5-1-事件传递机制" class="headerlink" title="5.1 事件传递机制"></a>5.1 事件传递机制</h4><ul><li>两个阶段：捕获阶段：父组件传递到子组件；冒泡阶段：子组件传递到父组件。事件传递顺序：从捕获-&gt;目标阶段-&gt;冒泡阶段</li><li><code>target</code>、<code>currentTarget</code>、<code>this</code><ul><li><code>target</code>：触发事件的对象</li><li><code>currentTarget</code>：绑定事件的对象</li><li><code>this</code>：</li><li>当处于目标阶段的时候，<code>target</code>和<code>currentTarget</code>是相等的。在捕获和冒泡阶段，<code>target</code>是触发事件的控件为子控件；<code>currentTarget</code>一般是父组件。</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员之殇--菠菜骗局</title>
    <link href="/2019/12/03/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E6%AE%87-%E8%8F%A0%E8%8F%9C%E9%AA%97%E5%B1%80/"/>
    <url>/2019/12/03/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B9%8B%E6%AE%87-%E8%8F%A0%E8%8F%9C%E9%AA%97%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>　　本人今年（2019年6月底的时候）由于公司“内部优化”，幸运的中奖了，实际整个开发部都被优化了，负责的APP项目没有一点收益，这种情景相信很多程序员都经历过了。经过和公司的据理力争，我们还是成功的拿到了合理的赔偿（正常的n+1），感觉还是很欣慰的。  </p><p>　　休息了一周，拿到赔偿的兴奋劲一过，想着自己上有老下有两小，年龄还是夕阳红的32，于是乎开始天天晚上焦虑。考虑回家创业，可除了技术，自己好像啥都没积累。自媒体，看着人家拍视频几万几十万甚至百万的收益天天晒，眼红过，嫉妒过，但懦弱内向的性格放弃了；人脉，也就是公司的技术同事了；情商，天天对着电脑屏幕敲键盘，能高到哪里去；职业规划，前几年互联网的红利让自己没有职业危机感，一直是第三方库的搬运工，说句码农不为过。借口千千万，生活总要过。生活的开销不会因为你的失业就停止，思想斗争之后，再次选择了本职工作（有其它路？）。当时定的期限是三个月内找不到就和另外的朋友去学电商了，他现在做的虽没程序员工资高，但收入也是中等了。  </p><p>　　花点钱，买了点原理视频看一看，点开网站，找到leetcode的题目写一写，开始在某勾投简历了（后来知道某boss是现在程序员的简历投递网站，后面会有说明）。由于有大厂（大厂也有码农的，俺就是😭，成长靠自己啊）的“辉煌”经历，小公司的面试还是挺多的，半个多月的面试，从面试题目的生疏到熟悉，基本都是创业型的公司，业务扩张型的，简单总结：你年龄大不好找工作吧，但是有大厂的光环，来了干活肯定没问题吧，工资合适的话，那就可以了，干活是第一位。从几个offer中选择了一个相对来说前景可以，能持续最起码两三年工作的一个公司。这里要填一个坑了：由于在某勾上的信息被一些所谓的“猎头”拿到，可能的骗局就出来了。</p><p>　　看这某勾上的面试邀约，诡异的会发现，出现几个薪资很高，不问你年龄的，交谈中啥都能满足你，但唯一的条件就是出国工作。然后你再去查看相关个人信息都是不完整，发布的公司信息也是不完整。这个时候就要小心了，始终默念：天上不会掉馅饼，掉了也不会砸住我，砸住我了也不一定能吃到。贪图便宜吃大亏的道理放到任何事情上都是适合的，相关文章输入关键字：程序员，菠菜，菲律宾，东南亚，应该很容易查到。　　</p><p>　　写这篇文章的目的主要是看到有些程序员被裁员，急于找工作被骗至外国，强迫搞菠菜的悲催经历所感。人生就是这样，有得必有失；互联网的红利给了我们暴力赚钱的机会，那竞争就只会越来越激烈；当大家享受红利的时候，也要能承受它的压力。虽然我们都着急找工作，都想赶快再赚点钱，但是也千万不要心头一热，踏入别人设的骗局。毕竟这个时代，个人信息其实都已经被泄露了几百遍了。总有别有用心的人，拿着我们的信息去换取钱，俗话说的好：千万别用钱去考验一个人。我们只需要记住：贪便宜吃大亏。遇到很好的offer，又不需要什么能力的，那你就要多长个心眼了，换位思考：我是老板，准备招这人干啥呢😏。</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂感</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
